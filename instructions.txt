To check for all globally installed packages and its dependencies, 
run the npm list command followed by the -g flag.

  > npm list -g

This above command prints the all globally installed packages in tree view.


To view the globally installed packages, without their dependencies use:

    > npm list -g --depth=0

You can also check if a specific package is installed globally or 
not using the npm list -g followed by package name.

  > npm list -g express

Checking locally installed packages
  > npm list
  > npm list --depth=0
  > npm list react

npm install -g parcel-bundler
  ==== installing parcel bundler globally, package helps browser with TS
   ==== Tool to help us run Tyoescript in the browser 

   So when we are going to run commande parcel index.html
   its going to look for our .ts file and automatically will compile it

   and wil have message that server is running at: http://localhost:1234

  
File structure
  notice index.ts with small alphabet
  and Users.ts with capital alphabet so we are exporinting 
  class from this file

Going to npmjs.com and going to look for pcakage called 'faker' package
  => https://www.npmjs.com/package/faker

  installing faker
    => npm install faker

So when we are imporitng faker we are going the see error could not find declaration file for module

Whenever we are writing TS code we are free to make use of JS code or more precisely JS
libariries as much we want to
  So we can install common JS libariries into TS project using NPM or 
  even we can refrence JS file
  we have written ourselves
    but there is one caveat, remember TS wants to check our code by the use of types
    TS wants to know what type of cuntion are there what calues they take and what values they return

If TS dont have this infomraiton it cannot check our code
  so we need to know that JS code we are using isnot going to have TS infomation attach to it
  and TS cant figure out itself what types of values are floating
  around the JS code
      So to fix this problem TS has an idea of 
          Type definition file
            its an adapter between TS file we write and JS library that we are using 

          its goign to tell all the differnet funcitons inside these libariries
          what tyep of argument they take snd what value those funcitons return 

      SO WE CAN THINK THESE TYPE DEFINTION FILES AS AN ADAPTER LAYER OF SOURCE

      sometimes these files get installed automatically wwhen we install JS library

      so when install axios in starting project we were not required to do anything
      related to TS defnintion files its bacause axios include TS definiton file 
      by default for us

      now for this current instance faker module don't have this type definition file

      so now we have ti install it manually if its not included for us
      its challening to know if TS defininiton file is there or not 
      but its straightforward to see error message warning and thats mean
      we need to install type declaration file

      once we understand we need to install this file its very simple process

        so here what going to happen
          almost all these TS definition files are publically available for you
          so in other words vast majorities libraries are available

            so for faker we have definitely typed naming scheme is available
              so to install we have this kind of syntax:
                @types/{library name}
                        =
                        =
                        =
                        =
                        =
                        =
                @types/faker

                so going back to npm web page => https://www.npmjs.com/package/faker
                and searching @types/faker

                so we can read description and other information and how to install

                    npm install @types/faker

                    so know if you go back on User.ts file you will notice that warning is gone

                    if we hold ctrl key and click faker we can taken to type definiton file jsut istalled

                    notice how file is named as index.d.ts tradaitionally file definition 
                    files are named like this, if you look at file name like this
                    you can be aware you are looking at type definiton file inisde this file there
                    will be nothing but TS syntax

 =======>       explanation on exporting with curly braces and default statement
        export const red = 'red'; // so this can be safely exported inside those set of curly braces inside index.ts file

        export default 'red'; // in this case we are not providing the name form this value 
                              // trying to export 
                              // so if we are exporting this in another file we will import it as
                              // import red from './User';
                              // so we can call it anythig for e.g color, red, 
                              // userColor or anything that we want to call it
                              // if we console.log it we simply will see red

        // In TS usually we don't use these default statement
        // Rhe reason for this is when we first starting with these modules
        // it quickly get really confusing when you should use culry braces and when should not
        // so convention in TS says never use default export statement
        // so if we are required to use this its totally fine but in TS world convention is not
        // to do this
        // so that rule not applied to third party libs like fakers and thats totally aviodable



